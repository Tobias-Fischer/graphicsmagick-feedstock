diff -Naur GraphicsMagick-1.3.35.orig/magick/static.c GraphicsMagick-1.3.35/magick/static.c
--- GraphicsMagick-1.3.35.orig/magick/static.c	2020-02-23 12:39:56.000000000 -0300
+++ GraphicsMagick-1.3.35/magick/static.c	2020-11-13 12:14:30.950044681 -0300
@@ -188,7 +188,7 @@
   STATICM("XCF",RegisterXCFImage,UnregisterXCFImage),
   STATICM("XPM",RegisterXPMImage,UnregisterXPMImage),
 #if defined(_VISUALC_)
-  STATICM("XTRN",RegisterXTRNImage,UnregisterXTRNImage),
+  // STATICM("XTRN",RegisterXTRNImage,UnregisterXTRNImage),
 #endif /* defined(_VISUALC_) */
 #if defined(HasX11)
   STATICM("XWD",RegisterXWDImage,UnregisterXWDImage),
diff -Naur GraphicsMagick-1.3.35.orig/magick/static.h GraphicsMagick-1.3.35/magick/static.h
--- GraphicsMagick-1.3.35.orig/magick/static.h	2020-02-23 12:39:56.000000000 -0300
+++ GraphicsMagick-1.3.35/magick/static.h	2020-11-13 12:14:59.534421766 -0300
@@ -158,7 +158,7 @@
   RegisterXPMImage(void),
   RegisterXVImage(void),
 #if defined(_VISUALC_)
-  RegisterXTRNImage(void),
+  // RegisterXTRNImage(void),
 #endif
   RegisterXWDImage(void),
   RegisterYUVImage(void),
diff -Naur GraphicsMagick-1.3.35.orig/magick/studio.h GraphicsMagick-1.3.35/magick/studio.h
--- GraphicsMagick-1.3.35.orig/magick/studio.h	2020-02-23 12:39:56.000000000 -0300
+++ GraphicsMagick-1.3.35/magick/studio.h	2020-11-13 12:14:13.149810138 -0300
@@ -471,10 +471,10 @@
 */
 
 #if defined(HasLTDL)
-#  define SupportMagickModules
+// #  define SupportMagickModules
 #elif !defined(__MINGW32__) && !defined(__MINGW64__)
 #  if defined(MSWINDOWS) && defined(_DLL)
-#    define SupportMagickModules
+// #    define SupportMagickModules
 #  endif
 #endif
 
--- GraphicsMagick-1.3.36.orig/Magick++/lib/Magick++/Drawable.h  2021-11-09 20:07:30.000000000 +1000
+++ GraphicsMagick-1.3.36/Magick++/lib/Magick++/Drawable.h      2021-11-09 20:08:48.000000000 +1000
@@ -128,7 +128,8 @@
   // https://en.cppreference.com/w/cpp/utility/functional/function
   //
   class MagickDLLDecl DrawableBase
-#if __cplusplus < 201703L
+#if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
+#else
   : public std::unary_function<MagickLib::DrawContext,void>
 #endif // if __cplusplus < 201703L
   {
--- GraphicsMagick-1.3.36.orig/Magick++/lib/Magick++/STL.h       2021-11-09 20:04:39.000000000 +1000
+++ GraphicsMagick-1.3.36/Magick++/lib/Magick++/STL.h   2021-11-09 20:06:34.000000000 +1000
@@ -42,11 +42,27 @@
   // for_each( images.begin(), images.end(), transparentImage( "red" ) );
   // writeImages( images.begin(), images.end(), "animation.gif" );
 
+  //
+  // Base class for all function objects used to manipulate images via
+  // an Image reference.  (used to inherit from std::unary_function,
+  // but it was removed in C++'17).
+  //
+  // https://en.cppreference.com/w/cpp/utility/functional/unary_function
+  // https://en.cppreference.com/w/cpp/utility/functional/function
+  //
+
+#if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
+#  define MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
+#else
+#  define MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE \
+  : public std::unary_function<Image&,void>
+#endif
+
   // Local adaptive threshold image
   // http://www.dai.ed.ac.uk/HIPR2/adpthrsh.htm
   // Width x height define the size of the pixel neighborhood
   // offset = constant to subtract from pixel neighborhood mean
-  class MagickDLLDecl adaptiveThresholdImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl adaptiveThresholdImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     adaptiveThresholdImage( const unsigned int width_,
@@ -62,7 +78,7 @@
   };
 
   // Add noise to image with specified noise type
-  class MagickDLLDecl addNoiseImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl addNoiseImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     addNoiseImage ( NoiseType noiseType_ );
@@ -74,7 +90,7 @@
   };
 
   // Transform image by specified affine (or free transform) matrix.
-  class MagickDLLDecl affineTransformImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl affineTransformImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     affineTransformImage( const DrawableAffine &affine_ );
@@ -86,7 +102,7 @@
   };
 
   // Annotate image (draw text on image)
-  class MagickDLLDecl annotateImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl annotateImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     // Annotate using specified text, and placement location
@@ -125,7 +141,7 @@
   };
 
   // Blur image with specified blur factor
-  class MagickDLLDecl blurImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl blurImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     blurImage( const double radius_ = 1, const double sigma_ = 0.5 );
@@ -138,7 +154,7 @@
   };
 
   // Border image (add border to image)
-  class MagickDLLDecl borderImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl borderImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     borderImage( const Geometry &geometry_ = borderGeometryDefault  );
@@ -150,7 +166,7 @@
   };
 
   // Extract channel from image
-  class MagickDLLDecl channelImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl channelImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     channelImage( const ChannelType channel_ );
@@ -162,7 +178,7 @@
   };
 
   // Charcoal effect image (looks like charcoal sketch)
-  class MagickDLLDecl charcoalImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl charcoalImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     charcoalImage( const double radius_ = 1, const double sigma_ = 0.5  );
@@ -175,7 +191,7 @@
   };
 
   // Chop image (remove vertical or horizontal subregion of image)
-  class MagickDLLDecl chopImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl chopImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     chopImage( const Geometry &geometry_ );
@@ -187,7 +203,7 @@
   };
 
   // Colorize image using pen color at specified percent opacity
-  class MagickDLLDecl colorizeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl colorizeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     colorizeImage( const unsigned int opacityRed_,
@@ -212,7 +228,7 @@
   // the exchange of basic primary color grading information between
   // equipment and software from different manufacturers.  It is a
   // useful transform for other purposes as well.
-  class MagickDLLDecl cdlImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl cdlImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     cdlImage( const std::string &cdl_ );
@@ -225,7 +241,7 @@
 
   // Apply a color matrix to the image channels.  The user supplied
   // matrix may be of order 1 to 5 (1x1 through 5x5).
-  class MagickDLLDecl colorMatrixImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl colorMatrixImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     colorMatrixImage( const unsigned int order_,
@@ -239,7 +255,7 @@
   };
 
   // Convert the image colorspace representation
-  class MagickDLLDecl colorSpaceImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl colorSpaceImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     colorSpaceImage( ColorspaceType colorSpace_ );
@@ -251,7 +267,7 @@
   };
 
   // Comment image (add comment string to image)
-  class MagickDLLDecl commentImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl commentImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     commentImage( const std::string &comment_ );
@@ -264,7 +280,7 @@
 
   // Compose an image onto another at specified offset and using
   // specified algorithm
-  class MagickDLLDecl compositeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl compositeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     compositeImage( const Image &compositeImage_,
@@ -286,7 +302,7 @@
   };
 
   // Contrast image (enhance intensity differences in image)
-  class MagickDLLDecl contrastImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl contrastImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     contrastImage( const unsigned int sharpen_ );
@@ -298,7 +314,7 @@
   };
 
   // Crop image (subregion of original image)
-  class MagickDLLDecl cropImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl cropImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     cropImage( const Geometry &geometry_ );
@@ -310,7 +326,7 @@
   };
 
   // Cycle image colormap
-  class MagickDLLDecl cycleColormapImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl cycleColormapImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     cycleColormapImage( const int amount_ );
@@ -322,7 +338,7 @@
   };
 
   // Despeckle image (reduce speckle noise)
-  class MagickDLLDecl despeckleImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl despeckleImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     despeckleImage( void );
@@ -333,7 +349,7 @@
   };
 
   // Draw on image
-  class MagickDLLDecl drawImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl drawImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     // Draw on image using a single drawable
@@ -350,7 +366,7 @@
   };
 
   // Edge image (hilight edges in image)
-  class MagickDLLDecl edgeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl edgeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     edgeImage( const double radius_ = 0.0  );
@@ -362,7 +378,7 @@
   };
 
   // Emboss image (hilight edges with 3D effect)
-  class MagickDLLDecl embossImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl embossImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     embossImage( void );
@@ -376,7 +392,7 @@
   };
 
   // Enhance image (minimize noise)
-  class MagickDLLDecl enhanceImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl enhanceImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     enhanceImage( void );
@@ -387,7 +403,7 @@
   };
 
   // Equalize image (histogram equalization)
-  class MagickDLLDecl equalizeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl equalizeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     equalizeImage( void );
@@ -404,7 +420,7 @@
   // parameter.  Parameters which are supported by image properties
   // (gravity and backgroundColor) update those image properties as a
   // side-effect.
-  class MagickDLLDecl extentImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl extentImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     // Extent image using a geometry
@@ -436,7 +452,7 @@
   };
 
   // Color to use when filling drawn objects
-  class MagickDLLDecl fillColorImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl fillColorImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     fillColorImage( const Color &fillColor_ );
@@ -448,7 +464,7 @@
   };
 
   // Flip image (reflect each scanline in the vertical direction)
-  class MagickDLLDecl flipImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl flipImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     flipImage( void );
@@ -459,7 +475,7 @@
   };
 
   // Flood-fill image with color
-  class MagickDLLDecl floodFillColorImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl floodFillColorImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     // Flood-fill color across pixels starting at target-pixel and
@@ -494,7 +510,7 @@
   };
 
   // Flood-fill image with texture
-  class MagickDLLDecl floodFillTextureImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl floodFillTextureImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     // Flood-fill texture across pixels that match the color of the
@@ -529,7 +545,7 @@
   };
 
   // Flop image (reflect each scanline in the horizontal direction)
-  class MagickDLLDecl flopImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl flopImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     flopImage( void );
@@ -540,7 +556,7 @@
   };
 
   // Frame image
-  class MagickDLLDecl frameImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl frameImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     frameImage( const Geometry &geometry_ = frameGeometryDefault );
@@ -558,7 +574,7 @@
   };
 
   // Gamma correct image
-  class MagickDLLDecl gammaImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl gammaImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     gammaImage( const double gamma_ );
@@ -579,7 +595,7 @@
   // The number of neighbor pixels to be included in the convolution
   // mask is specified by 'width_'. The standard deviation of the
   // gaussian bell curve is specified by 'sigma_'.
-  class MagickDLLDecl gaussianBlurImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl gaussianBlurImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     gaussianBlurImage( const double width_, const double sigma_ );
@@ -592,7 +608,7 @@
   };
 
   // Implode image (special effect)
-  class MagickDLLDecl implodeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl implodeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     implodeImage( const double factor_ = 50 );
@@ -604,7 +620,7 @@
   };
 
   // Apply a color lookup table (Hald CLUT) to the image.
-  class MagickDLLDecl haldClutImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl haldClutImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     haldClutImage( const Image &haldClutImage_ );
@@ -617,7 +633,7 @@
 
   // Set image validity. Valid images become empty (inValid) if
   // argument is false.
-  class MagickDLLDecl isValidImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl isValidImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     isValidImage( const bool isValid_ );
@@ -629,7 +645,7 @@
   };
 
   // Label image
-  class MagickDLLDecl labelImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl labelImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     labelImage( const std::string &label_ );
@@ -641,7 +657,7 @@
   };
 
   // Level image
-  class MagickDLLDecl levelImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl levelImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     levelImage( const double black_point,
@@ -657,7 +673,7 @@
   };
 
   // Level image channel
-  class MagickDLLDecl levelChannelImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl levelChannelImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     levelChannelImage( const Magick::ChannelType channel,
@@ -675,7 +691,7 @@
   };
 
   // Magnify image by integral size
-  class MagickDLLDecl magnifyImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl magnifyImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     magnifyImage( void );
@@ -686,7 +702,7 @@
   };
 
   // Remap image colors with closest color from reference image
-  class MagickDLLDecl mapImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl mapImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     mapImage( const Image &mapImage_ ,
@@ -700,7 +716,7 @@
   };
 
   // Floodfill designated area with a matte value
-  class MagickDLLDecl matteFloodfillImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl matteFloodfillImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     matteFloodfillImage( const Color &target_ ,
@@ -720,7 +736,7 @@
 
   // Filter image by replacing each pixel component with the median
   // color in a circular neighborhood
-  class MagickDLLDecl medianFilterImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl medianFilterImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     medianFilterImage( const double radius_ = 0.0 );
@@ -732,7 +748,7 @@
   };
 
   // Reduce image by integral size
-  class MagickDLLDecl minifyImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl minifyImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     minifyImage( void );
@@ -748,7 +764,7 @@
   // absolute rotation of -180 degrees to +180 degrees from the
   // current position corresponding to an argument range of 0 to 2.0
   // (1.0 for no change).
-  class MagickDLLDecl modulateImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl modulateImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     modulateImage( const double brightness_,
@@ -765,7 +781,7 @@
 
   // Negate colors in image.  Set grayscale to only negate grayscale
   // values in image.
-  class MagickDLLDecl negateImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl negateImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     negateImage( const bool grayscale_ = false );
@@ -778,7 +794,7 @@
 
   // Normalize image (increase contrast by normalizing the pixel
   // values to span the full range of color values)
-  class MagickDLLDecl normalizeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl normalizeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     normalizeImage( void );
@@ -789,7 +805,7 @@
   };
 
   // Oilpaint image (image looks like oil painting)
-  class MagickDLLDecl oilPaintImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl oilPaintImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     oilPaintImage( const double radius_ = 3 );
@@ -807,7 +823,7 @@
   // MaxRGB. The defines OpaqueOpacity and TransparentOpacity are
   // available to specify completely opaque or completely transparent,
   // respectively.
-  class MagickDLLDecl opacityImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl opacityImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     opacityImage( const unsigned int opacity_ );
@@ -819,7 +835,7 @@
   };
 
   // Change color of opaque pixel to specified pen color.
-  class MagickDLLDecl opaqueImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl opaqueImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     opaqueImage( const Color &opaqueColor_,
@@ -833,7 +849,7 @@
   };
 
   // Quantize image (reduce number of colors)
-  class MagickDLLDecl quantizeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl quantizeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     quantizeImage( const bool measureError_ = false );
@@ -846,7 +862,7 @@
 
   // Raise image (lighten or darken the edges of an image to give a
   // 3-D raised or lowered effect)
-  class MagickDLLDecl raiseImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl raiseImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     raiseImage( const Geometry &geometry_ = raiseGeometryDefault,
@@ -860,7 +876,7 @@
   };
 
   // Reduce noise in image using a noise peak elimination filter
-  class MagickDLLDecl reduceNoiseImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl reduceNoiseImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     reduceNoiseImage( void );
@@ -874,7 +890,7 @@
   };
 
   // Resize image to a certain geomtry
-  class MagickDLLDecl resizeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl resizeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     resizeImage( const Geometry &geometry_ );
@@ -887,7 +903,7 @@
 
   // Roll image (rolls image vertically and horizontally) by specified
   // number of columnms and rows)
-  class MagickDLLDecl rollImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl rollImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     rollImage( const Geometry &roll_ );
@@ -902,7 +918,7 @@
   };
 
   // Rotate image counter-clockwise by specified number of degrees.
-  class MagickDLLDecl rotateImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl rotateImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     rotateImage( const double degrees_ );
@@ -914,7 +930,7 @@
   };
 
   // Resize image by using pixel sampling algorithm
-  class MagickDLLDecl sampleImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl sampleImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     sampleImage( const Geometry &geometry_ );
@@ -926,7 +942,7 @@
   };
 
   // Resize image by using simple ratio algorithm
-  class MagickDLLDecl scaleImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl scaleImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     scaleImage( const Geometry &geometry_ );
@@ -941,7 +957,7 @@
   // histograms of the color components and identifying units that are
   // homogeneous with the fuzzy c-means technique.
   // Also uses QuantizeColorSpace and Verbose image attributes
-  class MagickDLLDecl segmentImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl segmentImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     segmentImage( const double clusterThreshold_ = 1.0,
@@ -955,7 +971,7 @@
   };
 
   // Shade image using distant light source
-  class MagickDLLDecl shadeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl shadeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     shadeImage( const double azimuth_ = 30,
@@ -971,7 +987,7 @@
   };
 
   // Sharpen pixels in image
-  class MagickDLLDecl sharpenImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl sharpenImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     sharpenImage( const double radius_ = 1, const double sigma_ = 0.5 );
@@ -984,7 +1000,7 @@
   };
 
   // Shave pixels from image edges.
-  class MagickDLLDecl shaveImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl shaveImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     shaveImage( const Geometry &geometry_ );
@@ -997,7 +1013,7 @@
 
 
   // Shear image (create parallelogram by sliding image by X or Y axis)
-  class MagickDLLDecl shearImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl shearImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     shearImage( const double xShearAngle_,
@@ -1012,7 +1028,7 @@
 
   // Solarize image (similar to effect seen when exposing a
   // photographic film to light during the development process)
-  class MagickDLLDecl solarizeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl solarizeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     solarizeImage( const double factor_ );
@@ -1024,7 +1040,7 @@
   };
 
   // Spread pixels randomly within image by specified ammount
-  class MagickDLLDecl spreadImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl spreadImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     spreadImage( const unsigned int amount_ = 3 );
@@ -1036,7 +1052,7 @@
   };
 
   // Add a digital watermark to the image (based on second image)
-  class MagickDLLDecl steganoImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl steganoImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     steganoImage( const Image &waterMark_ );
@@ -1049,7 +1065,7 @@
 
   // Create an image which appears in stereo when viewed with red-blue glasses
   // (Red image on left, blue on right)
-  class MagickDLLDecl stereoImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl stereoImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     stereoImage( const Image &rightImage_ );
@@ -1061,7 +1077,7 @@
   };
 
   // Color to use when drawing object outlines
-  class MagickDLLDecl strokeColorImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl strokeColorImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     strokeColorImage( const Color &strokeColor_ );
@@ -1073,7 +1089,7 @@
   };
 
   // Swirl image (image pixels are rotated by degrees)
-  class MagickDLLDecl swirlImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl swirlImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     swirlImage( const double degrees_ );
@@ -1085,7 +1101,7 @@
   };
 
   // Remove all profiles and text attributes from the image.
-  class MagickDLLDecl stripImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl stripImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     stripImage( void );
@@ -1096,7 +1112,7 @@
   };
 
   // Channel a texture on image background
-  class MagickDLLDecl textureImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl textureImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     textureImage( const Image &texture_ );
@@ -1108,7 +1124,7 @@
   };
 
   // Threshold image
-  class MagickDLLDecl thresholdImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl thresholdImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     thresholdImage( const double threshold_ );
@@ -1120,7 +1136,7 @@
   };
 
   // Transform image based on image and crop geometries
-  class MagickDLLDecl transformImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl transformImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     transformImage( const Geometry &imageGeometry_ );
@@ -1136,7 +1152,7 @@
   };
 
   // Set image color to transparent
-  class MagickDLLDecl transparentImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl transparentImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     transparentImage( const Color& color_ );
@@ -1148,7 +1164,7 @@
   };
 
   // Trim edges that are the background color from the image
-  class MagickDLLDecl trimImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl trimImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     trimImage( void );
@@ -1159,7 +1175,7 @@
   };
 
   // Map image pixels to a sine wave
-  class MagickDLLDecl waveImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl waveImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     waveImage( const double amplitude_ = 25.0,
@@ -1173,7 +1189,7 @@
   };
 
   // Zoom image to specified size.
-  class MagickDLLDecl zoomImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl zoomImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     zoomImage( const Geometry &geometry_ );
@@ -1189,7 +1205,7 @@
   //
 
   // Anti-alias Postscript and TrueType fonts (default true)
-  class MagickDLLDecl antiAliasImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl antiAliasImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     antiAliasImage( const bool flag_ );
@@ -1201,7 +1217,7 @@
   };
 
   // Join images into a single multi-image file
-  class MagickDLLDecl adjoinImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl adjoinImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     adjoinImage( const bool flag_ );
@@ -1214,7 +1230,7 @@
 
   // Time in 1/100ths of a second which must expire before displaying
   // the next image in an animated sequence.
-  class MagickDLLDecl animationDelayImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl animationDelayImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     animationDelayImage( const unsigned int delay_ );
@@ -1227,7 +1243,7 @@
 
   // Number of iterations to loop an animation (e.g. Netscape loop
   // extension) for.
-  class MagickDLLDecl animationIterationsImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl animationIterationsImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     animationIterationsImage( const unsigned int iterations_ );
@@ -1239,7 +1255,7 @@
   };
 
   // Image background color
-  class MagickDLLDecl backgroundColorImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl backgroundColorImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     backgroundColorImage( const Color &color_ );
@@ -1251,7 +1267,7 @@
   };
 
   // Name of texture image to tile onto the image background
-  class MagickDLLDecl backgroundTextureImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl backgroundTextureImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     backgroundTextureImage( const std::string &backgroundTexture_ );
@@ -1263,7 +1279,7 @@
   };
 
   // Image border color
-  class MagickDLLDecl borderColorImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl borderColorImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     borderColorImage( const Color &color_ );
@@ -1275,7 +1291,7 @@
   };
 
   // Text bounding-box base color (default none)
-  class MagickDLLDecl boxColorImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl boxColorImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     boxColorImage( const Color &boxColor_ );
@@ -1287,7 +1303,7 @@
   };
 
   // Chromaticity blue primary point (e.g. x=0.15, y=0.06)
-  class MagickDLLDecl chromaBluePrimaryImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl chromaBluePrimaryImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     chromaBluePrimaryImage( const double x_, const double y_ );
@@ -1300,7 +1316,7 @@
   };
 
   // Chromaticity green primary point (e.g. x=0.3, y=0.6)
-  class MagickDLLDecl chromaGreenPrimaryImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl chromaGreenPrimaryImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     chromaGreenPrimaryImage( const double x_, const double y_ );
@@ -1313,7 +1329,7 @@
   };
 
   // Chromaticity red primary point (e.g. x=0.64, y=0.33)
-  class MagickDLLDecl chromaRedPrimaryImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl chromaRedPrimaryImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     chromaRedPrimaryImage( const double x_, const double y_ );
@@ -1326,7 +1342,7 @@
   };
 
   // Chromaticity white point (e.g. x=0.3127, y=0.329)
-  class MagickDLLDecl chromaWhitePointImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl chromaWhitePointImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     chromaWhitePointImage( const double x_, const double y_ );
@@ -1339,7 +1355,7 @@
   };
 
   // Colors within this distance are considered equal
-  class MagickDLLDecl colorFuzzImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl colorFuzzImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     colorFuzzImage( const double fuzz_ );
@@ -1351,7 +1367,7 @@
   };
 
   // Color at colormap position index_
-  class MagickDLLDecl colorMapImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl colorMapImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     colorMapImage( const unsigned int index_, const Color &color_ );
@@ -1365,7 +1381,7 @@
 
   // Composition operator to be used when composition is implicitly used
   // (such as for image flattening).
-  class MagickDLLDecl composeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl composeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     composeImage( const CompositeOperator compose_ );
@@ -1377,7 +1393,7 @@
   };
 
   // Compression type
-  class MagickDLLDecl compressTypeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl compressTypeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     compressTypeImage( const CompressionType compressType_ );
@@ -1389,7 +1405,7 @@
   };
 
   // Vertical and horizontal resolution in pixels of the image
-  class MagickDLLDecl densityImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl densityImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     densityImage( const Geometry &geomery_ );
@@ -1401,7 +1417,7 @@
   };
 
   // Image depth (bits allocated to red/green/blue components)
-  class MagickDLLDecl depthImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl depthImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     depthImage( const unsigned int depth_ );
@@ -1414,7 +1430,7 @@
 
   // Endianness (LSBEndian like Intel or MSBEndian like SPARC) for image
   // formats which support endian-specific options.
-  class MagickDLLDecl endianImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl endianImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     endianImage( const EndianType endian_ );
@@ -1426,7 +1442,7 @@
   };
 
   // Image file name
-  class MagickDLLDecl fileNameImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl fileNameImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     fileNameImage( const std::string &fileName_ );
@@ -1438,7 +1454,7 @@
   };
 
   // Filter to use when resizing image
-  class MagickDLLDecl filterTypeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl filterTypeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     filterTypeImage( const FilterTypes filterType_ );
@@ -1450,7 +1466,7 @@
   };
 
   // Text rendering font
-  class MagickDLLDecl fontImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl fontImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     fontImage( const std::string &font_ );
@@ -1462,7 +1478,7 @@
   };
 
   // Font point size
-  class MagickDLLDecl fontPointsizeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl fontPointsizeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     fontPointsizeImage( const unsigned int pointsize_ );
@@ -1474,7 +1490,7 @@
   };
 
   // GIF disposal method
-  class MagickDLLDecl gifDisposeMethodImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl gifDisposeMethodImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     gifDisposeMethodImage( const unsigned int disposeMethod_ );
@@ -1486,7 +1502,7 @@
   };
 
   // Type of interlacing to use
-  class MagickDLLDecl interlaceTypeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl interlaceTypeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     interlaceTypeImage( const InterlaceType interlace_ );
@@ -1498,7 +1514,7 @@
   };
 
   // Linewidth for drawing vector objects (default one)
-  class MagickDLLDecl lineWidthImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl lineWidthImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     lineWidthImage( const double lineWidth_ );
@@ -1510,7 +1526,7 @@
   };
 
   // File type magick identifier (.e.g "GIF")
-  class MagickDLLDecl magickImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl magickImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     magickImage( const std::string &magick_ );
@@ -1522,7 +1538,7 @@
   };
 
   // Image supports transparent color
-  class MagickDLLDecl matteImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl matteImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     matteImage( const bool matteFlag_ );
@@ -1534,7 +1550,7 @@
   };
 
   // Transparent color
-  class MagickDLLDecl matteColorImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl matteColorImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     matteColorImage( const Color &matteColor_ );
@@ -1546,7 +1562,7 @@
   };
 
   // Indicate that image is black and white
-  class MagickDLLDecl monochromeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl monochromeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     monochromeImage( const bool monochromeFlag_ );
@@ -1558,7 +1574,7 @@
   };
 
   // Pen color
-  class MagickDLLDecl penColorImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl penColorImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     penColorImage( const Color &penColor_ );
@@ -1570,7 +1586,7 @@
   };
 
   // Pen texture image.
-  class MagickDLLDecl penTextureImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl penTextureImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     penTextureImage( const Image &penTexture_ );
@@ -1582,7 +1598,7 @@
   };
 
   // Set pixel color at location x & y.
-  class MagickDLLDecl pixelColorImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl pixelColorImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     pixelColorImage( const unsigned int x_,
@@ -1598,7 +1614,7 @@
   };
 
   // Postscript page size.
-  class MagickDLLDecl pageImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl pageImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     pageImage( const Geometry &pageSize_ );
@@ -1610,7 +1626,7 @@
   };
 
   // JPEG/MIFF/PNG compression level (default 75).
-  class MagickDLLDecl qualityImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl qualityImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     qualityImage( const unsigned int quality_ );
@@ -1622,7 +1638,7 @@
   };
 
   // Maximum number of colors to quantize to
-  class MagickDLLDecl quantizeColorsImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl quantizeColorsImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     quantizeColorsImage( const unsigned int colors_ );
@@ -1634,7 +1650,7 @@
   };
 
   // Colorspace to quantize in.
-  class MagickDLLDecl quantizeColorSpaceImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl quantizeColorSpaceImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     quantizeColorSpaceImage( const ColorspaceType colorSpace_ );
@@ -1646,7 +1662,7 @@
   };
 
   // Dither image during quantization (default true).
-  class MagickDLLDecl quantizeDitherImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl quantizeDitherImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     quantizeDitherImage( const bool ditherFlag_ );
@@ -1658,7 +1674,7 @@
   };
 
   // Quantization tree-depth
-  class MagickDLLDecl quantizeTreeDepthImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl quantizeTreeDepthImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     quantizeTreeDepthImage( const unsigned int treeDepth_ );
@@ -1670,7 +1686,7 @@
   };
 
   // The type of rendering intent
-  class MagickDLLDecl renderingIntentImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl renderingIntentImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     renderingIntentImage( const RenderingIntent renderingIntent_ );
@@ -1682,7 +1698,7 @@
   };
 
   // Units of image resolution
-  class MagickDLLDecl resolutionUnitsImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl resolutionUnitsImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     resolutionUnitsImage( const ResolutionType resolutionUnits_ );
@@ -1694,7 +1710,7 @@
   };
 
   // Image scene number
-  class MagickDLLDecl sceneImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl sceneImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     sceneImage( const unsigned int scene_ );
@@ -1706,7 +1722,7 @@
   };
 
   // Width and height of a raw image
-  class MagickDLLDecl sizeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl sizeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     sizeImage( const Geometry &geometry_ );
@@ -1718,7 +1734,7 @@
   };
 
   // Subimage of an image sequence
-  class MagickDLLDecl subImageImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl subImageImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     subImageImage( const unsigned int subImage_ );
@@ -1730,7 +1746,7 @@
   };
 
   // Number of images relative to the base image
-  class MagickDLLDecl subRangeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl subRangeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     subRangeImage( const unsigned int subRange_ );
@@ -1742,7 +1758,7 @@
   };
 
   // Tile name
-  class MagickDLLDecl tileNameImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl tileNameImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     tileNameImage( const std::string &tileName_ );
@@ -1754,7 +1770,7 @@
   };
 
   // Image storage type
-  class MagickDLLDecl typeImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl typeImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     typeImage( const ImageType type_ );
@@ -1767,7 +1783,7 @@
 
 
   // Print detailed information about the image
-  class MagickDLLDecl verboseImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl verboseImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     verboseImage( const bool verbose_ );
@@ -1779,7 +1795,7 @@
   };
 
   // FlashPix viewing parameters
-  class MagickDLLDecl viewImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl viewImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     viewImage( const std::string &view_ );
@@ -1792,7 +1808,7 @@
 
   // X11 display to display to, obtain fonts from, or to capture
   // image from
-  class MagickDLLDecl x11DisplayImage : public std::unary_function<Image&,void>
+  class MagickDLLDecl x11DisplayImage MAGICK_UNARY_FUNCTION_IMAGE_REF_BASE
   {
   public:
     x11DisplayImage( const std::string &display_ );
